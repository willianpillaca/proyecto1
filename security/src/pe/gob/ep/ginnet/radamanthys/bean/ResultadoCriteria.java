package pe.gob.ep.ginnet.radamanthys.bean;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResultadoCriteria {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public ResultadoCriteria() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    protected ResultadoCriteria(ResultadoCriteria example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table tbl_resultado
     *
     * @ibatorgenerated
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andIdAlumnoIsNull() {
            addCriterion("id_alumno is null");
            return this;
        }

        public Criteria andIdAlumnoIsNotNull() {
            addCriterion("id_alumno is not null");
            return this;
        }

        public Criteria andIdAlumnoEqualTo(Integer value) {
            addCriterion("id_alumno =", value, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoNotEqualTo(Integer value) {
            addCriterion("id_alumno <>", value, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoGreaterThan(Integer value) {
            addCriterion("id_alumno >", value, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoGreaterThanOrEqualTo(Integer value) {
            addCriterion("id_alumno >=", value, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoLessThan(Integer value) {
            addCriterion("id_alumno <", value, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoLessThanOrEqualTo(Integer value) {
            addCriterion("id_alumno <=", value, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoIn(List<Integer> values) {
            addCriterion("id_alumno in", values, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoNotIn(List<Integer> values) {
            addCriterion("id_alumno not in", values, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoBetween(Integer value1, Integer value2) {
            addCriterion("id_alumno between", value1, value2, "idAlumno");
            return this;
        }

        public Criteria andIdAlumnoNotBetween(Integer value1, Integer value2) {
            addCriterion("id_alumno not between", value1, value2, "idAlumno");
            return this;
        }

        public Criteria andIdCursoIsNull() {
            addCriterion("id_curso is null");
            return this;
        }

        public Criteria andIdCursoIsNotNull() {
            addCriterion("id_curso is not null");
            return this;
        }

        public Criteria andIdCursoEqualTo(Integer value) {
            addCriterion("id_curso =", value, "idCurso");
            return this;
        }

        public Criteria andIdCursoNotEqualTo(Integer value) {
            addCriterion("id_curso <>", value, "idCurso");
            return this;
        }

        public Criteria andIdCursoGreaterThan(Integer value) {
            addCriterion("id_curso >", value, "idCurso");
            return this;
        }

        public Criteria andIdCursoGreaterThanOrEqualTo(Integer value) {
            addCriterion("id_curso >=", value, "idCurso");
            return this;
        }

        public Criteria andIdCursoLessThan(Integer value) {
            addCriterion("id_curso <", value, "idCurso");
            return this;
        }

        public Criteria andIdCursoLessThanOrEqualTo(Integer value) {
            addCriterion("id_curso <=", value, "idCurso");
            return this;
        }

        public Criteria andIdCursoIn(List<Integer> values) {
            addCriterion("id_curso in", values, "idCurso");
            return this;
        }

        public Criteria andIdCursoNotIn(List<Integer> values) {
            addCriterion("id_curso not in", values, "idCurso");
            return this;
        }

        public Criteria andIdCursoBetween(Integer value1, Integer value2) {
            addCriterion("id_curso between", value1, value2, "idCurso");
            return this;
        }

        public Criteria andIdCursoNotBetween(Integer value1, Integer value2) {
            addCriterion("id_curso not between", value1, value2, "idCurso");
            return this;
        }

        public Criteria andNotaIsNull() {
            addCriterion("nota is null");
            return this;
        }

        public Criteria andNotaIsNotNull() {
            addCriterion("nota is not null");
            return this;
        }

        public Criteria andNotaEqualTo(Integer value) {
            addCriterion("nota =", value, "nota");
            return this;
        }

        public Criteria andNotaNotEqualTo(Integer value) {
            addCriterion("nota <>", value, "nota");
            return this;
        }

        public Criteria andNotaGreaterThan(Integer value) {
            addCriterion("nota >", value, "nota");
            return this;
        }

        public Criteria andNotaGreaterThanOrEqualTo(Integer value) {
            addCriterion("nota >=", value, "nota");
            return this;
        }

        public Criteria andNotaLessThan(Integer value) {
            addCriterion("nota <", value, "nota");
            return this;
        }

        public Criteria andNotaLessThanOrEqualTo(Integer value) {
            addCriterion("nota <=", value, "nota");
            return this;
        }

        public Criteria andNotaIn(List<Integer> values) {
            addCriterion("nota in", values, "nota");
            return this;
        }

        public Criteria andNotaNotIn(List<Integer> values) {
            addCriterion("nota not in", values, "nota");
            return this;
        }

        public Criteria andNotaBetween(Integer value1, Integer value2) {
            addCriterion("nota between", value1, value2, "nota");
            return this;
        }

        public Criteria andNotaNotBetween(Integer value1, Integer value2) {
            addCriterion("nota not between", value1, value2, "nota");
            return this;
        }

        public Criteria andNumPregCorrectasIsNull() {
            addCriterion("num_preg_correctas is null");
            return this;
        }

        public Criteria andNumPregCorrectasIsNotNull() {
            addCriterion("num_preg_correctas is not null");
            return this;
        }

        public Criteria andNumPregCorrectasEqualTo(Integer value) {
            addCriterion("num_preg_correctas =", value, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasNotEqualTo(Integer value) {
            addCriterion("num_preg_correctas <>", value, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasGreaterThan(Integer value) {
            addCriterion("num_preg_correctas >", value, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasGreaterThanOrEqualTo(Integer value) {
            addCriterion("num_preg_correctas >=", value, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasLessThan(Integer value) {
            addCriterion("num_preg_correctas <", value, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasLessThanOrEqualTo(Integer value) {
            addCriterion("num_preg_correctas <=", value, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasIn(List<Integer> values) {
            addCriterion("num_preg_correctas in", values, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasNotIn(List<Integer> values) {
            addCriterion("num_preg_correctas not in", values, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasBetween(Integer value1, Integer value2) {
            addCriterion("num_preg_correctas between", value1, value2, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregCorrectasNotBetween(Integer value1, Integer value2) {
            addCriterion("num_preg_correctas not between", value1, value2, "numPregCorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasIsNull() {
            addCriterion("num_preg_incorrectas is null");
            return this;
        }

        public Criteria andNumPregIncorrectasIsNotNull() {
            addCriterion("num_preg_incorrectas is not null");
            return this;
        }

        public Criteria andNumPregIncorrectasEqualTo(Integer value) {
            addCriterion("num_preg_incorrectas =", value, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasNotEqualTo(Integer value) {
            addCriterion("num_preg_incorrectas <>", value, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasGreaterThan(Integer value) {
            addCriterion("num_preg_incorrectas >", value, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasGreaterThanOrEqualTo(Integer value) {
            addCriterion("num_preg_incorrectas >=", value, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasLessThan(Integer value) {
            addCriterion("num_preg_incorrectas <", value, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasLessThanOrEqualTo(Integer value) {
            addCriterion("num_preg_incorrectas <=", value, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasIn(List<Integer> values) {
            addCriterion("num_preg_incorrectas in", values, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasNotIn(List<Integer> values) {
            addCriterion("num_preg_incorrectas not in", values, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasBetween(Integer value1, Integer value2) {
            addCriterion("num_preg_incorrectas between", value1, value2, "numPregIncorrectas");
            return this;
        }

        public Criteria andNumPregIncorrectasNotBetween(Integer value1, Integer value2) {
            addCriterion("num_preg_incorrectas not between", value1, value2, "numPregIncorrectas");
            return this;
        }

        public Criteria andCondicionIsNull() {
            addCriterion("condicion is null");
            return this;
        }

        public Criteria andCondicionIsNotNull() {
            addCriterion("condicion is not null");
            return this;
        }

        public Criteria andCondicionEqualTo(String value) {
            addCriterion("condicion =", value, "condicion");
            return this;
        }

        public Criteria andCondicionNotEqualTo(String value) {
            addCriterion("condicion <>", value, "condicion");
            return this;
        }

        public Criteria andCondicionGreaterThan(String value) {
            addCriterion("condicion >", value, "condicion");
            return this;
        }

        public Criteria andCondicionGreaterThanOrEqualTo(String value) {
            addCriterion("condicion >=", value, "condicion");
            return this;
        }

        public Criteria andCondicionLessThan(String value) {
            addCriterion("condicion <", value, "condicion");
            return this;
        }

        public Criteria andCondicionLessThanOrEqualTo(String value) {
            addCriterion("condicion <=", value, "condicion");
            return this;
        }

        public Criteria andCondicionLike(String value) {
            addCriterion("condicion like", value, "condicion");
            return this;
        }

        public Criteria andCondicionNotLike(String value) {
            addCriterion("condicion not like", value, "condicion");
            return this;
        }

        public Criteria andCondicionIn(List<String> values) {
            addCriterion("condicion in", values, "condicion");
            return this;
        }

        public Criteria andCondicionNotIn(List<String> values) {
            addCriterion("condicion not in", values, "condicion");
            return this;
        }

        public Criteria andCondicionBetween(String value1, String value2) {
            addCriterion("condicion between", value1, value2, "condicion");
            return this;
        }

        public Criteria andCondicionNotBetween(String value1, String value2) {
            addCriterion("condicion not between", value1, value2, "condicion");
            return this;
        }

        public Criteria andRutaArchivoIsNull() {
            addCriterion("ruta_archivo is null");
            return this;
        }

        public Criteria andRutaArchivoIsNotNull() {
            addCriterion("ruta_archivo is not null");
            return this;
        }

        public Criteria andRutaArchivoEqualTo(String value) {
            addCriterion("ruta_archivo =", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoNotEqualTo(String value) {
            addCriterion("ruta_archivo <>", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoGreaterThan(String value) {
            addCriterion("ruta_archivo >", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoGreaterThanOrEqualTo(String value) {
            addCriterion("ruta_archivo >=", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoLessThan(String value) {
            addCriterion("ruta_archivo <", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoLessThanOrEqualTo(String value) {
            addCriterion("ruta_archivo <=", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoLike(String value) {
            addCriterion("ruta_archivo like", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoNotLike(String value) {
            addCriterion("ruta_archivo not like", value, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoIn(List<String> values) {
            addCriterion("ruta_archivo in", values, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoNotIn(List<String> values) {
            addCriterion("ruta_archivo not in", values, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoBetween(String value1, String value2) {
            addCriterion("ruta_archivo between", value1, value2, "rutaArchivo");
            return this;
        }

        public Criteria andRutaArchivoNotBetween(String value1, String value2) {
            addCriterion("ruta_archivo not between", value1, value2, "rutaArchivo");
            return this;
        }

        public Criteria andEstadoIsNull() {
            addCriterion("estado is null");
            return this;
        }

        public Criteria andEstadoIsNotNull() {
            addCriterion("estado is not null");
            return this;
        }

        public Criteria andEstadoEqualTo(Integer value) {
            addCriterion("estado =", value, "estado");
            return this;
        }

        public Criteria andEstadoNotEqualTo(Integer value) {
            addCriterion("estado <>", value, "estado");
            return this;
        }

        public Criteria andEstadoGreaterThan(Integer value) {
            addCriterion("estado >", value, "estado");
            return this;
        }

        public Criteria andEstadoGreaterThanOrEqualTo(Integer value) {
            addCriterion("estado >=", value, "estado");
            return this;
        }

        public Criteria andEstadoLessThan(Integer value) {
            addCriterion("estado <", value, "estado");
            return this;
        }

        public Criteria andEstadoLessThanOrEqualTo(Integer value) {
            addCriterion("estado <=", value, "estado");
            return this;
        }

        public Criteria andEstadoIn(List<Integer> values) {
            addCriterion("estado in", values, "estado");
            return this;
        }

        public Criteria andEstadoNotIn(List<Integer> values) {
            addCriterion("estado not in", values, "estado");
            return this;
        }

        public Criteria andEstadoBetween(Integer value1, Integer value2) {
            addCriterion("estado between", value1, value2, "estado");
            return this;
        }

        public Criteria andEstadoNotBetween(Integer value1, Integer value2) {
            addCriterion("estado not between", value1, value2, "estado");
            return this;
        }
    }
}