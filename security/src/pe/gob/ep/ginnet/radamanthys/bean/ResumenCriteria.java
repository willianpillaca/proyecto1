package pe.gob.ep.ginnet.radamanthys.bean;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResumenCriteria {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public ResumenCriteria() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    protected ResumenCriteria(ResumenCriteria example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table tbl_resumen
     *
     * @ibatorgenerated
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andCodAlumnoIsNull() {
            addCriterion("cod_alumno is null");
            return this;
        }

        public Criteria andCodAlumnoIsNotNull() {
            addCriterion("cod_alumno is not null");
            return this;
        }

        public Criteria andCodAlumnoEqualTo(Integer value) {
            addCriterion("cod_alumno =", value, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoNotEqualTo(Integer value) {
            addCriterion("cod_alumno <>", value, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoGreaterThan(Integer value) {
            addCriterion("cod_alumno >", value, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoGreaterThanOrEqualTo(Integer value) {
            addCriterion("cod_alumno >=", value, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoLessThan(Integer value) {
            addCriterion("cod_alumno <", value, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoLessThanOrEqualTo(Integer value) {
            addCriterion("cod_alumno <=", value, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoIn(List<Integer> values) {
            addCriterion("cod_alumno in", values, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoNotIn(List<Integer> values) {
            addCriterion("cod_alumno not in", values, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoBetween(Integer value1, Integer value2) {
            addCriterion("cod_alumno between", value1, value2, "codAlumno");
            return this;
        }

        public Criteria andCodAlumnoNotBetween(Integer value1, Integer value2) {
            addCriterion("cod_alumno not between", value1, value2, "codAlumno");
            return this;
        }

        public Criteria andCodCursoIsNull() {
            addCriterion("cod_curso is null");
            return this;
        }

        public Criteria andCodCursoIsNotNull() {
            addCriterion("cod_curso is not null");
            return this;
        }

        public Criteria andCodCursoEqualTo(Integer value) {
            addCriterion("cod_curso =", value, "codCurso");
            return this;
        }

        public Criteria andCodCursoNotEqualTo(Integer value) {
            addCriterion("cod_curso <>", value, "codCurso");
            return this;
        }

        public Criteria andCodCursoGreaterThan(Integer value) {
            addCriterion("cod_curso >", value, "codCurso");
            return this;
        }

        public Criteria andCodCursoGreaterThanOrEqualTo(Integer value) {
            addCriterion("cod_curso >=", value, "codCurso");
            return this;
        }

        public Criteria andCodCursoLessThan(Integer value) {
            addCriterion("cod_curso <", value, "codCurso");
            return this;
        }

        public Criteria andCodCursoLessThanOrEqualTo(Integer value) {
            addCriterion("cod_curso <=", value, "codCurso");
            return this;
        }

        public Criteria andCodCursoIn(List<Integer> values) {
            addCriterion("cod_curso in", values, "codCurso");
            return this;
        }

        public Criteria andCodCursoNotIn(List<Integer> values) {
            addCriterion("cod_curso not in", values, "codCurso");
            return this;
        }

        public Criteria andCodCursoBetween(Integer value1, Integer value2) {
            addCriterion("cod_curso between", value1, value2, "codCurso");
            return this;
        }

        public Criteria andCodCursoNotBetween(Integer value1, Integer value2) {
            addCriterion("cod_curso not between", value1, value2, "codCurso");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaIsNull() {
            addCriterion("nota_pregunta_abierta is null");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaIsNotNull() {
            addCriterion("nota_pregunta_abierta is not null");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaEqualTo(Long value) {
            addCriterion("nota_pregunta_abierta =", value, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaNotEqualTo(Long value) {
            addCriterion("nota_pregunta_abierta <>", value, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaGreaterThan(Long value) {
            addCriterion("nota_pregunta_abierta >", value, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaGreaterThanOrEqualTo(Long value) {
            addCriterion("nota_pregunta_abierta >=", value, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaLessThan(Long value) {
            addCriterion("nota_pregunta_abierta <", value, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaLessThanOrEqualTo(Long value) {
            addCriterion("nota_pregunta_abierta <=", value, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaIn(List<Long> values) {
            addCriterion("nota_pregunta_abierta in", values, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaNotIn(List<Long> values) {
            addCriterion("nota_pregunta_abierta not in", values, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaBetween(Long value1, Long value2) {
            addCriterion("nota_pregunta_abierta between", value1, value2, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaAbiertaNotBetween(Long value1, Long value2) {
            addCriterion("nota_pregunta_abierta not between", value1, value2, "notaPreguntaAbierta");
            return this;
        }

        public Criteria andNotaPreguntaCerradaIsNull() {
            addCriterion("nota_pregunta_cerrada is null");
            return this;
        }

        public Criteria andNotaPreguntaCerradaIsNotNull() {
            addCriterion("nota_pregunta_cerrada is not null");
            return this;
        }

        public Criteria andNotaPreguntaCerradaEqualTo(Long value) {
            addCriterion("nota_pregunta_cerrada =", value, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaNotEqualTo(Long value) {
            addCriterion("nota_pregunta_cerrada <>", value, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaGreaterThan(Long value) {
            addCriterion("nota_pregunta_cerrada >", value, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaGreaterThanOrEqualTo(Long value) {
            addCriterion("nota_pregunta_cerrada >=", value, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaLessThan(Long value) {
            addCriterion("nota_pregunta_cerrada <", value, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaLessThanOrEqualTo(Long value) {
            addCriterion("nota_pregunta_cerrada <=", value, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaIn(List<Long> values) {
            addCriterion("nota_pregunta_cerrada in", values, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaNotIn(List<Long> values) {
            addCriterion("nota_pregunta_cerrada not in", values, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaBetween(Long value1, Long value2) {
            addCriterion("nota_pregunta_cerrada between", value1, value2, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaPreguntaCerradaNotBetween(Long value1, Long value2) {
            addCriterion("nota_pregunta_cerrada not between", value1, value2, "notaPreguntaCerrada");
            return this;
        }

        public Criteria andNotaFinalIsNull() {
            addCriterion("nota_final is null");
            return this;
        }

        public Criteria andNotaFinalIsNotNull() {
            addCriterion("nota_final is not null");
            return this;
        }

        public Criteria andNotaFinalEqualTo(Long value) {
            addCriterion("nota_final =", value, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalNotEqualTo(Long value) {
            addCriterion("nota_final <>", value, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalGreaterThan(Long value) {
            addCriterion("nota_final >", value, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalGreaterThanOrEqualTo(Long value) {
            addCriterion("nota_final >=", value, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalLessThan(Long value) {
            addCriterion("nota_final <", value, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalLessThanOrEqualTo(Long value) {
            addCriterion("nota_final <=", value, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalIn(List<Long> values) {
            addCriterion("nota_final in", values, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalNotIn(List<Long> values) {
            addCriterion("nota_final not in", values, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalBetween(Long value1, Long value2) {
            addCriterion("nota_final between", value1, value2, "notaFinal");
            return this;
        }

        public Criteria andNotaFinalNotBetween(Long value1, Long value2) {
            addCriterion("nota_final not between", value1, value2, "notaFinal");
            return this;
        }
    }
}